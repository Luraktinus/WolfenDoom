class SkyViewPointStatic : SkyViewPoint
{
	Actor base, anchor;
	Vector3 oldbasepos;
	double heightoffset;
	int scaling;

	Default
	{
		//$Title Skybox ViewPoint (Static)
		//$Arg1 "Skybox Scene Scale"
		//$Arg1Tooltip "The scale of the skybox's scene (default is 100).  The larger this number is, the farther away the skybox contents will appear to be."
		//$Arg1Default 100
		//$Arg2 "Anchor Object TID"
		//$Arg2Tooltip "TID of an actor to anchor the skybox on.  Default value (0) means to anchor on player start spot."
		//$Arg2Default 0
		+NOCLIP
		Height 0;
		Radius 0;
	}

	override void PostBeginPlay()
	{
		// Set the scaling value according to whatever arg 1 value is passed
		scaling = args[1] == 0 ? 100 : args[1];

		// Save the spawn location vector for later
		SpawnPoint = pos;

		if (args[2] != 0)
		{
			ActorIterator it = ActorIterator.Create(args[2], "Actor");
			anchor = it.Next();
		}

		// Iterate through all of the possible players in the game
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			// If a player is in the game and has spawned...
			if (playeringame[i] && players[i].camera)
			{
				if (!base)  // Set the skybox to follow the first player who is in the game
				{
					base = players[i].camera;
					oldbasepos = anchor ? anchor.pos : base.pos; // Use the anchor spot as the origin if there is one, otherwise fall back to player spawn position
					heightoffset = pos.z - base.pos.z - 17.25; // To match normal skybox offset height
				}
				else { base = null; break; } // If there are multiple players, don't move the skybox
			}
		}
	}

	override void Tick()
	{
		if (base && base.player)
		{
			Vector2 offset;

			// Reset the viewpoint's height location
			double heightdelta = (base.pos.z - pos.z + base.player.mo.height * base.player.crouchfactor) / scaling;
			SetOrigin((pos.x, pos.y, (SpawnPoint.z + heightoffset + heightdelta) / 2), true);

			offset = (base.pos.xy - oldbasepos.xy) / scaling;
			offset = RotateVector(offset, angle);

			SetOrigin(pos + offset, true);

			// Save the player's old position
			oldbasepos = base.pos;
		}

		Super.Tick();
	}
}

class SkyViewpointAnchor : MapSpot
{
	Default
	{
		//$Title Skybox ViewPoint Anchor
		//$NotAngled
	}
}